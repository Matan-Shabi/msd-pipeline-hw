name: Release Pipeline

on:
  push:
    branches: [ main ]
    paths-ignore:
      - 'README.md'
      - 'docs/**'
  workflow_dispatch:
    inputs:
      version_bump:
        description: 'Version bump type'
        required: true
        default: 'patch'
        type: choice
        options:
          - patch
          - minor
          - major

permissions:
  contents: write
  packages: write
  pull-requests: write

jobs:
  version-and-tag:
    runs-on: ubuntu-latest
    outputs:
      new_version: ${{ steps.version.outputs.new_version }}
      release_created: ${{ steps.version.outputs.release_created }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: "3.11"

      - name: Install bump2version
        run: pip install bump2version

      - name: Configure Git
        run: |
          git config --local user.name "github-actions"
          git config --local user.email "action@github.com"

      - name: Determine version bump type
        id: bump_type
        run: |
          if [ "${{ github.event_name }}" = "workflow_dispatch" ]; then
            echo "bump_type=${{ github.event.inputs.version_bump }}" >> $GITHUB_OUTPUT
          else
            if git log --format=%B -n 20 | grep -Ei "^(BREAKING|breaking):"; then
              echo "bump_type=major" >> $GITHUB_OUTPUT
            elif git log --format=%B -n 20 | grep -Ei "^(feat|feature):"; then
              echo "bump_type=minor" >> $GITHUB_OUTPUT
            else
              echo "bump_type=patch" >> $GITHUB_OUTPUT
            fi
          fi

      - name: Bump version
        id: version
        run: |
          CURRENT_VERSION=$(python -c "import main; print(main.__version__)")
          BUMP_TYPE="${{ steps.bump_type.outputs.bump_type }}"

          cat > .bumpversion.cfg <<EOF
          [bumpversion]
          current_version = $CURRENT_VERSION
          commit = False
          tag = False

          [bumpversion:file:main.py]
          search = __version__ = "{current_version}"
          replace = __version__ = "{new_version}"
          EOF

          bumpversion $BUMP_TYPE
          NEW_VERSION=$(python -c "import main; print(main.__version__)")

          echo "new_version=$NEW_VERSION" >> $GITHUB_OUTPUT
          echo "release_created=true" >> $GITHUB_OUTPUT

          git add main.py
          git commit -m "Bump version: $CURRENT_VERSION → $NEW_VERSION"
          git tag -a "v$NEW_VERSION" -m "Release v$NEW_VERSION"

      - name: Push changes
        run: git push origin main --follow-tags

  build-and-release:
    needs: version-and-tag
    if: needs.version-and-tag.outputs.release_created == 'true'
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: "3.11"

      - name: Install dependencies
        run: |
          pip install --upgrade pip
          pip install build wheel twine
          pip install -r requirements.txt || true
          pip install -e .

      - name: Run tests
        run: python -m unittest discover -s . -p "test_*.py" -v

      - name: Build package
        run: python -m build

      - name: Check artifacts
        run: twine check dist/*

      - name: Upload artifacts
        uses: actions/upload-artifact@v4
        with:
          name: msd-package-${{ needs.version-and-tag.outputs.new_version }}
          path: dist/
          retention-days: 30

      - name: Publish to GitHub Packages
        env:
          TWINE_USERNAME: __token__
          TWINE_PASSWORD: ${{ secrets.GITHUB_TOKEN }}
        run: |
          echo "[distutils]" > ~/.pypirc
          echo "index-servers = github" >> ~/.pypirc
          echo "[github]" >> ~/.pypirc
          echo "repository = https://pypi.pkg.github.com/Matan-Shabi" >> ~/.pypirc
          echo "username = __token__" >> ~/.pypirc
          echo "password = ${{ secrets.GITHUB_TOKEN }}" >> ~/.pypirc

          twine upload --repository github dist/*

      - name: GitHub Release
        uses: softprops/action-gh-release@v2
        with:
          tag_name: v${{ needs.version-and-tag.outputs.new_version }}
          name: Release v${{ needs.version-and-tag.outputs.new_version }}
          body: |
            Auto-generated release from main branch.

            ## Install via GitHub Packages
            ```bash
            pip install --extra-index-url https://pypi.pkg.github.com/${{ github.repository_owner }} matan-shabi-msd-pipeline-hw
            ```
          files: dist/*
          draft: false
          prerelease: false

  deploy-to-artifactory:
    needs: build-and-release
    runs-on: ubuntu-latest
    steps:
      - name: Download artifacts
        uses: actions/download-artifact@v4
        with:
          name: msd-package-${{ needs.version-and-tag.outputs.new_version }}
          path: dist/

      - name: Simulate Artifactory upload
        run: |
          echo "Simulating upload to Artifactory..."
          ls -l dist/

      - name: Simulate AWS S3 upload
        run: |
          echo "Simulating upload to AWS S3..."
          ls -l dist/

  notify:
    needs: [build-and-release, deploy-to-artifactory]
    if: always()
    runs-on: ubuntu-latest
    steps:
      - name: Notify success
        if: ${{ needs.build-and-release.result == 'success' && needs.deploy-to-artifactory.result == 'success' }}
        run: echo "✅ Release successful"

      - name: Notify failure
        if: ${{ needs.build-and-release.result != 'success' || needs.deploy-to-artifactory.result != 'success' }}
        run: echo "❌ Release failed"
