name: Release Pipeline

on:
  push:
    branches: [ main ]
    paths-ignore:
      - 'README.md'
      - 'docs/**'
  workflow_dispatch:
    inputs:
      version_bump:
        description: 'Version bump type'
        required: true
        default: 'patch'
        type: choice
        options:
          - patch
          - minor
          - major

permissions:
  contents: write
  packages: write
  pull-requests: write

env:
  PYTHON_VERSION: "3.11"

jobs:
  version-and-tag:
    runs-on: ubuntu-latest
    outputs:
      new_version: ${{ steps.version.outputs.new_version }}
      release_created: ${{ steps.version.outputs.release_created }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
          token: ${{ secrets.GITHUB_TOKEN }}

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: ${{ env.PYTHON_VERSION }}

      - name: Install bump2version
        run: pip install bump2version

      - name: Configure Git
        run: |
          git config --local user.name "github-actions[bot]"
          git config --local user.email "41898282+github-actions[bot]@users.noreply.github.com"

      - name: Determine version bump type
        id: bump_type
        run: |
          if [ "${{ github.event_name }}" = "workflow_dispatch" ]; then
            echo "bump_type=${{ github.event.inputs.version_bump }}" >> $GITHUB_OUTPUT
            echo "Manual trigger: ${{ github.event.inputs.version_bump }}"
          else
            # Analyze recent commits for semantic versioning
            if git log --format=%B -n 10 | grep -Ei "^(BREAKING|breaking):" | head -1; then
              echo "bump_type=major" >> $GITHUB_OUTPUT
              echo "Found breaking change - major bump"
            elif git log --format=%B -n 10 | grep -Ei "^(feat|feature):" | head -1; then
              echo "bump_type=minor" >> $GITHUB_OUTPUT
              echo "Found feature - minor bump"
            else
              echo "bump_type=patch" >> $GITHUB_OUTPUT
              echo "Default - patch bump"
            fi
          fi

      - name: Bump version and create tag
        id: version
        run: |
          # Get current version
          CURRENT_VERSION=$(python -c "import main; print(main.__version__)")
          echo "Current version: $CURRENT_VERSION"
          
          BUMP_TYPE="${{ steps.bump_type.outputs.bump_type }}"
          echo "Bump type: $BUMP_TYPE"

          # Create bumpversion config
          cat > .bumpversion.cfg << EOF
          [bumpversion]
          current_version = $CURRENT_VERSION
          commit = False
          tag = False

          [bumpversion:file:main.py]
          search = __version__ = "{current_version}"
          replace = __version__ = "{new_version}"
          EOF

          # Bump version
          bumpversion $BUMP_TYPE
          NEW_VERSION=$(python -c "import main; print(main.__version__)")
          
          echo "New version: $NEW_VERSION"
          echo "new_version=$NEW_VERSION" >> $GITHUB_OUTPUT
          echo "release_created=true" >> $GITHUB_OUTPUT

          # Commit and tag
          git add main.py
          git commit -m "chore: bump version $CURRENT_VERSION → $NEW_VERSION"
          git tag -a "v$NEW_VERSION" -m "Release v$NEW_VERSION"

      - name: Push changes and tags
        run: |
          git push origin main
          git push origin --tags
          echo "✅ Version ${{ steps.version.outputs.new_version }} tagged and pushed"

  build-test-and-release:
    needs: version-and-tag
    if: needs.version-and-tag.outputs.release_created == 'true'
    runs-on: ubuntu-latest
    steps:
      - name: Checkout updated code
        uses: actions/checkout@v4
        with:
          ref: main

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: ${{ env.PYTHON_VERSION }}

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install build wheel twine
          pip install -r requirements.txt || echo "No requirements.txt found"
          pip install -e .

      - name: Run tests
        run: |
          echo "🧪 Running tests..."
          python -m unittest discover -s . -p "test_*.py" -v

      - name: Build package
        run: |
          echo "📦 Building package..."
          python -m build
          ls -la dist/

      - name: Check package
        run: |
          echo "🔍 Checking package..."
          twine check dist/*

      - name: Upload build artifacts
        uses: actions/upload-artifact@v4
        with:
          name: python-package-${{ needs.version-and-tag.outputs.new_version }}
          path: dist/
          retention-days: 90

      - name: Publish to PyPI (optional)
        if: env.PYPI_API_TOKEN != ''
        env:
          PYPI_API_TOKEN: ${{ secrets.PYPI_API_TOKEN }}
        run: |
          echo "📤 Publishing to PyPI..."
          twine upload \
            --username __token__ \
            --password ${{ env.PYPI_API_TOKEN }} \
            dist/*
          echo "✅ Published to PyPI"

      - name: Create GitHub Release
        uses: softprops/action-gh-release@v2
        with:
          tag_name: v${{ needs.version-and-tag.outputs.new_version }}
          name: "Release v${{ needs.version-and-tag.outputs.new_version }}"
          body: |
            ## 🚀 Release v${{ needs.version-and-tag.outputs.new_version }}
            
            Auto-generated release from main branch.
            
            ### 📦 Installation
            
            **Option 1: Install from PyPI** (if published)
            ```bash
            pip install matan-shabi-msd-pipeline-hw
            ```
            
            **Option 2: Install from GitHub Release**
            ```bash
            pip install https://github.com/${{ github.repository }}/releases/download/v${{ needs.version-and-tag.outputs.new_version }}/matan_shabi_msd_pipeline_hw-${{ needs.version-and-tag.outputs.new_version }}-py3-none-any.whl
            ```
            
            **Option 3: Install from source**
            ```bash
            git clone https://github.com/${{ github.repository }}.git
            cd msd-pipiline-hw
            pip install -e .
            ```
            
            ### 🔧 Usage
            ```bash
            subnet-calc --help
            ```
            
            ---
            *Generated by GitHub Actions on $(date)*
          files: dist/*
          draft: false
          prerelease: false

  deploy-simulation:
    needs: [version-and-tag, build-test-and-release]
    runs-on: ubuntu-latest
    if: needs.version-and-tag.outputs.release_created == 'true'
    steps:
      - name: Download artifacts
        uses: actions/download-artifact@v4
        with:
          name: python-package-${{ needs.version-and-tag.outputs.new_version }}
          path: dist/

      - name: Simulate Artifactory deployment
        run: |
          echo "🏗️ Simulating Artifactory deployment..."
          echo "Package: $(ls dist/*.whl | head -1)"
          echo "Version: ${{ needs.version-and-tag.outputs.new_version }}"
          echo "Target: artifactory.company.com/pypi-local/"
          echo "✅ Artifactory deployment simulated"

      - name: Simulate AWS S3 deployment
        run: |
          echo "☁️ Simulating AWS S3 deployment..."
          echo "Bucket: s3://company-python-packages/"
          echo "Key: msd-pipeline-hw/v${{ needs.version-and-tag.outputs.new_version }}/"
          echo "Files: $(ls dist/ | wc -l) artifacts"
          echo "✅ S3 deployment simulated"

  notification:
    needs: [version-and-tag, build-test-and-release, deploy-simulation]
    if: always()
    runs-on: ubuntu-latest
    steps:
      - name: Notify success
        if: |
          needs.version-and-tag.result == 'success' && 
          needs.build-test-and-release.result == 'success' && 
          needs.deploy-simulation.result == 'success'
        run: |
          echo "🎉 Release v${{ needs.version-and-tag.outputs.new_version }} completed successfully!"
          echo "📦 Package built and released"
          echo "🚀 Deployment simulations completed"
          echo "📋 All checks passed"

      - name: Notify failure
        if: |
          needs.version-and-tag.result != 'success' || 
          needs.build-test-and-release.result != 'success' || 
          needs.deploy-simulation.result != 'success'
        run: |
          echo "❌ Release pipeline failed"
          echo "Check the job logs for details"
          echo "Failed jobs:"
          echo "- version-and-tag: ${{ needs.version-and-tag.result }}"
          echo "- build-test-and-release: ${{ needs.build-test-and-release.result }}"
          echo "- deploy-simulation: ${{ needs.deploy-simulation.result }}"
          exit 1